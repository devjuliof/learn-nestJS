var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.681,1,2.884,2,1.326,3,0.48,4,0.413,5,0.413,6,3.02,7,0.704,8,2.062,9,4.424,10,1.467,11,0.039,12,0.977,13,3.668,14,1.626,15,1.52,16,0.609,17,0.88,18,2.517,19,3.02,20,0.48,21,0.024,22,2.019,23,1.626,24,1.626,25,3.668,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,1.083,29,1.858]],["body/modules/AppModule.html",[1,2.838,2,1.451,3,0.384,4,0.33,5,0.33,11,0.039,16,0.696,17,0.704,18,2.623,19,2.415,20,0.384,21,0.019,26,0.026,27,0.026,28,1.654,29,3.592,30,1.3,31,1.3,32,1.615,33,1.615,34,1.3,35,2.52,36,1.615,37,2.415,38,2.415,39,2.415,40,2.623,41,2.93,42,2.359,43,2.21,44,1.615,45,1.446,46,2.934,47,2.489,48,2.934,49,2.415,50,2.934,51,2.934]],["title/injectables/AppService.html",[18,1.477,52,1.083]],["body/injectables/AppService.html",[3,0.507,4,0.436,5,0.436,7,0.744,8,2.133,9,4.511,11,0.038,12,1.032,14,1.716,15,1.573,16,0.507,17,0.929,18,2.372,20,0.507,21,0.025,24,1.716,26,0.031,27,0.031,52,1.74,53,2.132,54,3.188,55,3.873,56,3.873,57,3.873]],["title/controllers/AuthController.html",[0,1.083,58,1.858]],["body/controllers/AuthController.html",[0,1.444,2,1.444,3,0.522,4,0.45,5,0.45,11,0.039,16,0.642,17,0.958,20,0.522,21,0.026,22,2.199,23,1.77,26,0.032,27,0.032,58,3.042,59,3.289,60,2.824,61,3.995,62,2.354,63,3.289,64,3.995]],["title/modules/AuthModule.html",[28,1.083,40,1.477]],["body/modules/AuthModule.html",[2,1.536,3,0.418,4,0.359,5,0.359,11,0.039,16,0.666,17,0.765,20,0.418,21,0.021,26,0.027,27,0.027,28,1.727,30,1.415,31,1.415,32,1.757,33,1.757,34,1.415,35,2.63,36,2.63,40,2.744,42,1.884,43,2.34,44,1.757,45,1.573,47,1.979,58,2.962,62,2.603,63,2.628,65,2.628,66,2.628,67,2.628,68,3.192,69,2.635,70,3.192,71,3.192]],["title/injectables/AuthService.html",[52,1.083,62,1.329]],["body/injectables/AuthService.html",[3,0.37,4,0.318,5,0.318,7,0.543,8,1.734,11,0.039,12,1.196,14,1.734,15,1.847,16,0.512,17,0.678,20,0.37,21,0.018,23,1.252,24,1.734,26,0.025,27,0.025,52,1.414,53,1.555,62,1.734,69,1.751,72,2.326,73,2.897,74,3.988,75,4.488,76,2.765,77,2.326,78,2.157,79,2.825,80,2.154,81,1.928,82,1.155,83,1.734,84,2.825,85,2.825,86,3.912,87,3.695,88,2.782,89,2.825,90,1.997,91,2.326,92,2.825,93,2.326,94,2.326,95,1.997,96,1.751,97,2.825,98,2.825,99,2.326]],["title/classes/CreatePostDto.html",[21,0.019,100,1.65]],["body/classes/CreatePostDto.html",[3,0.157,4,0.135,5,0.135,7,0.231,10,1.78,11,0.039,12,1.186,15,1.678,16,0.485,20,0.157,21,0.017,26,0.013,27,0.013,82,1.481,83,2.076,99,2.819,100,1.114,101,0.533,102,3.234,103,0.85,104,1.16,105,3.054,106,2.618,107,2.618,108,3.409,109,2.618,110,2.618,111,3.424,112,1.851,113,3.424,114,3.247,115,1.666,116,2.119,117,3.216,118,1.203,119,1.203,120,2.527,121,2.023,122,2.023,123,3.409,124,1.203,125,1.203,126,1.903,127,1.203,128,3.07,129,1.43,130,1.666,131,2.023,132,1.203,133,1.203,134,1.203,135,2.023,136,1.947,137,1.666,138,3.07,139,1.254,140,2.023,141,1.203,142,1.203,143,2.023,144,2.155,145,2.023,146,2.023,147,1.203,148,1.203,149,2.023,150,2.023,151,2.618,152,2.023,153,2.023,154,2.023,155,2.023,156,1.203,157,1.203,158,3.07,159,1.203,160,3.07,161,3.07,162,1.666,163,2.023,164,2.023,165,2.023,166,2.023,167,2.023,168,2.023,169,1.203,170,2.819,171,2.023,172,1.666,173,1.666,174,1.666,175,1.203,176,1.203,177,2.023,178,1.203,179,1.203,180,3.07,181,1.203,182,1.203,183,1.203,184,1.203,185,0.85,186,2.618,187,1.203,188,2.122,189,2.42,190,0.99,191,0.99,192,3.247,193,2.023,194,2.023,195,2.023,196,2.023,197,0.593,198,1.203,199,1.203,200,0.746,201,1.43,202,1.203,203,3.054,204,3.054,205,0.593,206,1.203,207,2.023,208,0.99,209,1.203,210,1.203,211,1.203,212,1.203,213,1.203,214,1.203,215,1.203,216,0.99,217,0.99,218,0.99,219,1.851,220,0.99,221,1.203,222,1.203,223,1.43,224,0.99,225,1.203]],["title/classes/CreatePostMetaOptionsDto.html",[21,0.019,126,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.46,4,0.396,5,0.396,7,0.675,10,1.811,11,0.038,12,1.206,15,1.48,16,0.46,20,0.46,21,0.029,26,0.029,27,0.029,82,1.337,101,1.558,102,3.54,104,2.007,116,2.22,126,2.807,188,3.279,189,3.201,197,1.732,201,3.54,219,3.54,223,3.54,226,2.894,227,3.516,228,3.516,229,3.516]],["title/classes/CreateUserDto.html",[21,0.019,230,1.65]],["body/classes/CreateUserDto.html",[3,0.387,4,0.333,5,0.333,7,0.568,10,1.838,11,0.038,12,1.225,15,1.743,16,0.387,20,0.387,21,0.026,26,0.026,27,0.026,81,2.264,82,1.357,87,4.256,90,3.249,101,1.31,104,1.789,129,2.853,162,3.323,188,3.061,189,3.491,190,2.434,191,3.323,197,1.457,218,3.323,230,2.222,231,4.066,232,2.09,233,2.957,234,2.957,235,2.957,236,2.957,237,2.957,238,4.037,239,4.037,240,4.037,241,4.037,242,4.037,243,2.957,244,4.037,245,2.957,246,2.957,247,2.957]],["title/classes/GetUsersParamDto.html",[21,0.019,248,1.65]],["body/classes/GetUsersParamDto.html",[3,0.434,4,0.373,5,0.373,7,0.637,10,1.326,11,0.039,12,0.884,16,0.637,20,0.434,21,0.031,26,0.028,27,0.028,82,1.438,83,1.932,88,3.331,96,2.703,101,1.47,104,1.932,117,2.703,120,2.731,136,1.326,185,2.345,192,3.589,197,1.634,204,3.589,205,1.634,248,2.4,249,3.589,250,2.703,251,2.731,252,3.019,253,4.36,254,3.317,255,3.317,256,3.589,257,3.317]],["title/classes/PatchPostsDto.html",[21,0.019,258,1.858]],["body/classes/PatchPostsDto.html",[3,0.442,4,0.38,5,0.38,7,0.648,10,1.35,11,0.039,12,0.899,16,0.642,20,0.442,21,0.029,26,0.029,27,0.029,82,0.997,88,3.35,100,1.858,101,1.496,103,2.386,104,1.954,115,2.779,116,1.954,136,1.35,188,2.734,197,1.663,200,2.093,203,3.631,205,1.663,252,2.734,256,3.631,258,2.734,259,3.631,260,3.631,261,4.41,262,4.41,263,3.376,264,3.376,265,2.779,266,2.779,267,2.779]],["title/classes/PatchUserDto.html",[21,0.019,268,1.858]],["body/classes/PatchUserDto.html",[3,0.528,4,0.455,5,0.455,11,0.038,16,0.646,20,0.528,21,0.026,26,0.032,27,0.032,101,1.789,200,2.502,230,2.222,232,2.853,260,4.066,265,3.323,268,3.061,269,3.323,270,4.939,271,3.323,272,3.323,273,3.323]],["title/controllers/PostsController.html",[0,1.083,274,1.858]],["body/controllers/PostsController.html",[0,0.761,2,0.761,3,0.276,4,0.237,5,0.237,7,0.405,8,1.403,10,1.52,11,0.039,12,1.013,14,1.685,15,1.381,16,0.593,17,0.505,20,0.276,21,0.014,22,1.16,23,0.934,24,1.403,26,0.02,27,0.02,60,1.489,73,2.859,80,2.093,81,1.873,82,1.123,83,1.685,100,2.619,112,2.237,116,2.302,123,3.48,136,1.69,200,1.962,205,1.038,258,2.95,266,2.606,267,2.606,274,1.962,275,1.735,276,2.107,277,3.165,278,3.165,279,3.165,280,2.107,281,3.165,282,2.237,283,3.165,284,4.227,285,4.227,286,3.802,287,2.107,288,2.107,289,2.107,290,3.165,291,2.107,292,2.606,293,2.107,294,2.606,295,3.165,296,3.48,297,2.107,298,2.107,299,2.107,300,1.735,301,1.735,302,2.606,303,1.559,304,1.735,305,2.107,306,3.13,307,3.13,308,2.107,309,2.107,310,2.107,311,2.107,312,2.107,313,2.606,314,3.165,315,2.107,316,2.107,317,2.107,318,2.107]],["title/modules/PostsModule.html",[28,1.083,41,1.65]],["body/modules/PostsModule.html",[2,1.558,3,0.426,4,0.367,5,0.367,11,0.039,16,0.672,17,0.782,20,0.426,21,0.021,26,0.028,27,0.028,28,1.745,30,1.445,31,1.445,32,1.795,33,1.795,34,1.445,35,2.658,36,1.795,41,3.129,42,2.433,43,2.373,44,1.795,45,1.606,47,2.672,49,2.684,274,2.993,303,2.704,304,2.684,319,2.684,320,3.26,321,2.684,322,3.26,323,3.26]],["title/injectables/PostsService.html",[52,1.083,303,1.477]],["body/injectables/PostsService.html",[3,0.39,4,0.335,5,0.335,7,0.572,8,1.798,11,0.039,12,1.081,14,1.321,15,1.508,16,0.531,17,0.715,20,0.39,21,0.019,22,1.64,23,1.321,24,1.321,26,0.026,27,0.026,52,1.467,53,1.64,73,2.54,76,2.106,77,2.453,78,2.139,80,2.234,81,1.999,82,1.198,83,1.798,95,2.106,96,3.213,105,4.079,114,4.079,292,2.453,303,1.999,324,2.453,325,3.341,326,2.98,327,4.058,328,2.98,329,2.98,330,2.98,331,4.058,332,3.341,333,4.058]],["title/controllers/UsersController.html",[0,1.083,334,1.858]],["body/controllers/UsersController.html",[0,0.626,2,0.626,3,0.227,4,0.195,5,0.195,7,0.333,8,1.207,10,1.346,11,0.038,12,0.897,14,1.491,15,0.566,16,0.576,17,0.416,20,0.227,21,0.011,22,0.954,23,0.768,24,1.837,26,0.018,27,0.018,60,1.225,73,2.7,78,1.346,80,1.853,81,2.043,82,1.359,83,1.491,112,1.225,116,1.69,117,2.365,129,2.696,130,3.14,136,1.76,139,2.956,205,0.854,224,2.243,230,2.423,248,2.1,250,2.854,252,3.311,268,2.956,273,2.243,282,1.926,296,2.243,300,1.427,301,2.243,302,2.771,306,2.243,307,2.243,313,1.427,334,1.689,335,1.427,336,2.724,337,3.365,338,2.724,339,1.733,340,1.733,341,1.733,342,3.624,343,1.733,344,2.724,345,2.724,346,2.724,347,1.733,348,2.724,349,2.724,350,2.243,351,1.733,352,2.724,353,2.724,354,2.724,355,3.814,356,1.733,357,2.724,358,2.724,359,3.365,360,1.733,361,2.243,362,1.733,363,1.733,364,1.733,365,1.733,366,3.365,367,2.724,368,1.733,369,1.733,370,1.427,371,1.427,372,1.733,373,1.427,374,3.365,375,1.733,376,1.733,377,1.427,378,1.733,379,1.733,380,1.733,381,1.733,382,1.733,383,1.733,384,1.733,385,1.733,386,1.733,387,1.733,388,1.733,389,1.733]],["title/modules/UsersModule.html",[28,1.083,42,1.329]],["body/modules/UsersModule.html",[2,1.536,3,0.418,4,0.359,5,0.359,11,0.039,16,0.666,17,0.765,20,0.418,21,0.021,26,0.027,27,0.027,28,1.727,30,1.415,31,1.415,32,1.757,33,1.757,34,1.415,35,2.63,36,2.63,40,2.094,42,2.468,43,2.34,44,1.757,45,1.573,47,1.979,69,2.635,78,2.349,334,2.962,373,2.628,390,2.628,391,2.628,392,2.628,393,3.192,394,3.192,395,3.192]],["title/injectables/UsersService.html",[52,1.083,78,1.199]],["body/injectables/UsersService.html",[3,0.279,4,0.24,5,0.24,7,0.409,8,1.414,11,0.039,12,1.02,14,1.414,15,1.487,16,0.501,17,0.511,20,0.279,21,0.025,23,0.944,24,1.414,26,0.021,27,0.021,52,1.153,53,1.173,62,2.196,69,1.321,73,2.63,74,1.754,76,2.256,78,1.276,80,2.107,81,2.441,82,1.13,83,1.696,88,2.635,90,3.004,91,1.754,93,1.754,94,1.754,95,1.506,96,2.635,136,0.852,139,2.372,248,2.34,250,2.822,252,2.962,325,3.151,342,3.151,361,2.628,370,1.754,371,1.754,396,1.754,397,3.192,398,2.628,399,3.192,400,3.192,401,3.192,402,3.192,403,2.131,404,2.131,405,2.131,406,2.131,407,3.192,408,3.192,409,3.192,410,2.131,411,3.192,412,3.192,413,2.628,414,2.131,415,2.131,416,2.131,417,2.131,418,2.131,419,2.131,420,2.131,421,2.131,422,2.131,423,2.131,424,3.192,425,3.192]],["title/coverage.html",[426,2.88]],["body/coverage.html",[0,1.751,1,1.751,5,0.318,6,2.326,11,0.038,18,1.392,21,0.034,26,0.025,27,0.025,34,1.252,52,1.751,54,2.326,58,1.751,59,2.326,62,1.252,72,2.326,78,1.13,82,0.834,100,1.555,102,2.765,103,2.765,116,1.252,126,1.751,201,1.997,220,2.326,226,2.326,230,1.555,231,2.326,232,2.765,248,1.555,249,2.326,250,1.751,251,2.326,258,1.751,259,2.326,268,1.751,269,2.326,274,1.751,275,2.326,282,1.997,303,1.392,324,2.326,334,1.751,335,2.326,396,2.326,398,2.326,426,1.997,427,2.326,428,2.825,429,5.837,430,4.844,431,4.488,432,4.844,433,2.326,434,2.825,435,3.912,436,2.825,437,2.825,438,2.825,439,2.825]],["title/dependencies.html",[31,1.596,440,2.068]],["body/dependencies.html",[11,0.039,17,0.924,21,0.031,26,0.031,27,0.031,31,1.708,185,2.724,197,1.898,205,1.898,271,3.172,272,3.172,441,3.853,442,3.853,443,5.226,444,3.853,445,3.853,446,3.853,447,3.853,448,3.853,449,3.853,450,3.853,451,3.853,452,3.853,453,3.853,454,3.853,455,3.853]],["title/miscellaneous/enumerations.html",[456,1.557,457,2.965]],["body/miscellaneous/enumerations.html",[7,0.715,11,0.038,26,0.03,27,0.03,108,3.865,116,2.081,139,2.911,144,3.865,170,3.865,172,3.865,173,3.865,174,3.865,208,3.865,223,4.129,456,2.307,457,3.064,458,3.722,459,3.722,460,3.722,461,3.722,462,4.695]],["title/miscellaneous/functions.html",[456,1.557,463,2.965]],["body/miscellaneous/functions.html",[7,0.862,11,0.034,26,0.034,27,0.034,34,2.474,433,3.695,456,2.782,463,3.695,464,4.488]],["title/index.html",[7,0.482,465,2.512,466,2.512]],["body/index.html",[4,0.214,11,0.036,26,0.019,27,0.019,45,2.251,117,2.482,136,0.759,137,1.562,216,4.046,217,1.562,219,1.341,294,1.562,332,2.406,350,1.562,377,3.761,413,1.562,426,1.341,427,2.406,467,1.897,468,1.897,469,3.565,470,2.923,471,1.897,472,1.897,473,1.897,474,1.897,475,2.923,476,3.565,477,1.897,478,1.897,479,4.005,480,1.897,481,4.914,482,1.897,483,4.76,484,1.897,485,1.897,486,1.897,487,2.923,488,1.897,489,2.923,490,1.897,491,3.565,492,1.897,493,1.897,494,1.897,495,1.897,496,1.897,497,1.897,498,4.005,499,2.923,500,1.897,501,1.897,502,1.897,503,1.897,504,4.568,505,2.923,506,4.005,507,1.897,508,2.923,509,1.897,510,2.923,511,4.568,512,4.005,513,1.897,514,2.923,515,1.897,516,1.897,517,1.897,518,1.897,519,4.005,520,1.897,521,1.897,522,1.897,523,1.897,524,2.923,525,1.897,526,1.897,527,1.897,528,1.897,529,1.897,530,2.923,531,1.897,532,1.897,533,1.897,534,2.923,535,1.897,536,1.897,537,3.297,538,2.923,539,1.897,540,1.897,541,1.897,542,1.897,543,1.897,544,1.897,545,1.897,546,1.897,547,2.923,548,1.897,549,1.897,550,1.897,551,1.897,552,3.565,553,1.897,554,1.897,555,1.897,556,1.897,557,1.897,558,2.923,559,1.897,560,1.897,561,1.897,562,1.897,563,2.923,564,1.897,565,1.897,566,1.897,567,2.923,568,2.923,569,1.897,570,1.897,571,1.897,572,1.897,573,1.897,574,1.897,575,1.897,576,1.897,577,1.897,578,1.897,579,1.897,580,1.562,581,1.897,582,1.897,583,1.897,584,1.897,585,1.897,586,1.897,587,1.562]],["title/modules.html",[30,1.806]],["body/modules.html",[11,0.033,26,0.033,27,0.033,29,2.585,30,1.848,40,2.054,41,2.295,42,1.848,537,4.627,588,5.621,589,5.621,590,5.621]],["title/overview.html",[591,3.355]],["body/overview.html",[2,1.09,11,0.038,18,2.287,26,0.026,27,0.026,28,1.09,29,3.548,30,1.336,31,1.336,32,1.66,33,1.66,34,1.336,35,1.66,36,1.66,37,2.482,38,2.482,39,2.482,40,2.644,41,3.022,42,2.433,43,2.252,44,1.66,45,1.486,53,1.66,62,2.433,65,2.482,66,2.482,67,2.482,78,2.195,101,1.336,303,2.287,319,2.482,321,2.482,390,2.482,391,2.482,392,2.482,591,2.482,592,4.643,593,3.015]],["title/properties.html",[104,1.596,440,2.068]],["body/properties.html",[11,0.038,26,0.034,27,0.034,104,1.955,136,1.764,580,3.631,587,3.631,594,4.41,595,4.41,596,4.41]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":595,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1.1.23",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":257,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":254,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":333,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.6",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3/4",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":592,"title":{},"body":{"overview.html":{}}}],["6",{"_index":593,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.1.0",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allowing",{"_index":525,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":573,"title":{},"body":{"index.html":{}}}],["api",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostsDto.html":{}}}],["apiproperty({description",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostsDto.html":{}}}],["apiproperty({enum",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":475,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":580,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":62,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":514,"title":{},"body":{"index.html":{}}}],["backers",{"_index":574,"title":{},"body":{"index.html":{}}}],["banco",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":566,"title":{},"body":{"index.html":{}}}],["body",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":590,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":588,"title":{},"body":{"modules.html":{}}}],["building",{"_index":470,"title":{},"body":{"index.html":{}}}],["bussiness",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":540,"title":{},"body":{"index.html":{}}}],["check",{"_index":504,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":101,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":524,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":509,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":319,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":320,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":321,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":390,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":391,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":392,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":531,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":397,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('buscando",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createpostdto",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostsdto",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(patchuserdto",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":403,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":546,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":426,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":100,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":126,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":230,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body(new",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{}}}],["dados",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["de",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":542,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":498,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":513,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":505,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":523,"title":{},"body":{"index.html":{}}}],["description",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":484,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":553,"title":{},"body":{"index.html":{}}}],["discord",{"_index":539,"title":{},"body":{"index.html":{}}}],["dive",{"_index":541,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":427,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":493,"title":{},"body":{"index.html":{}}}],["each",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":471,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":503,"title":{},"body":{"index.html":{}}}],["email",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":501,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":557,"title":{},"body":{"index.html":{}}}],["entries",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":457,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["experience",{"_index":544,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":260,"title":{},"body":{"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":517,"title":{},"body":{"index.html":{}}}],["featured",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":527,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":519,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":325,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":327,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["focus",{"_index":526,"title":{},"body":{"index.html":{}}}],["follow",{"_index":560,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":469,"title":{},"body":{"index.html":{}}}],["full",{"_index":556,"title":{},"body":{"index.html":{}}}],["function",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":463,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":522,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":465,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":248,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":549,"title":{},"body":{"index.html":{}}}],["grow",{"_index":570,"title":{},"body":{"index.html":{}}}],["hands",{"_index":543,"title":{},"body":{"index.html":{}}}],["handy",{"_index":532,"title":{},"body":{"index.html":{}}}],["headers",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":547,"title":{},"body":{"index.html":{}}}],["here",{"_index":578,"title":{},"body":{"index.html":{}}}],["https://localhost.com/images/images1.jpg",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://localhost.com/images/images1.jpg'})@isoptional()@isurl",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":584,"title":{},"body":{"index.html":{}}}],["https://schema.org\"}'})@isoptional()@isjson",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":507,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":529,"title":{},"body":{"index.html":{}}}],["inject",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":52,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":521,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":482,"title":{},"body":{"index.html":{}}}],["interact",{"_index":550,"title":{},"body":{"index.html":{}}}],["ip",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":256,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{}}}],["isiso8601",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostsDto.html":{}}}],["isoptional",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":227,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(3)@isnotempty()@isemail",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8)@isnotempty()@matches(/^(?=.*[a",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["joana",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["joanapaty@gmail.com",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":563,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":565,"title":{},"body":{"index.html":{}}}],["john",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["johnvlogs@gmial.com",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":576,"title":{},"body":{"index.html":{}}}],["json",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":581,"title":{},"body":{"index.html":{}}}],["key",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["learn",{"_index":535,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letters",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":587,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":568,"title":{},"body":{"index.html":{}}}],["limit",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":562,"title":{},"body":{"index.html":{}}}],["list",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":508,"title":{},"body":{"index.html":{}}}],["loop",{"_index":559,"title":{},"body":{"index.html":{}}}],["makes",{"_index":515,"title":{},"body":{"index.html":{}}}],["managing",{"_index":528,"title":{},"body":{"index.html":{}}}],["match",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":511,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":456,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":567,"title":{},"body":{"index.html":{}}}],["mode",{"_index":487,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":506,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":582,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":554,"title":{},"body":{"index.html":{}}}],["needs",{"_index":262,"title":{},"body":{"classes/PatchPostsDto.html":{}}}],["nest",{"_index":476,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":586,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":271,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":468,"title":{},"body":{"index.html":{}}}],["npm",{"_index":481,"title":{},"body":{"index.html":{}}}],["number",{"_index":252,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["o",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["object",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":564,"title":{},"body":{"index.html":{}}}],["official",{"_index":512,"title":{},"body":{"index.html":{}}}],["open",{"_index":569,"title":{},"body":{"index.html":{}}}],["operations",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":226,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":228,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":229,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":591,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":440,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":251,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":255,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":555,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":265,"title":{},"body":{"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":261,"title":{},"body":{"classes/PatchPostsDto.html":{}}}],["partialtype(createuserdto",{"_index":270,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostsdto",{"_index":258,"title":{"classes/PatchPostsDto.html":{}},"body":{"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":268,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pattern",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["per",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":399,"title":{},"body":{"injectables/UsersService.html":{}}}],["platform",{"_index":510,"title":{},"body":{"index.html":{}}}],["please",{"_index":538,"title":{},"body":{"index.html":{}}}],["position",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["possiblevalues",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":266,"title":{},"body":{"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostsDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":264,"title":{},"body":{"classes/PatchPostsDto.html":{}}}],["post.dto.ts:125",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:73",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:81",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:89",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:99",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":323,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":274,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":303,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservices",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["poststatus",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":489,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":467,"title":{},"body":{"index.html":{}}}],["project",{"_index":479,"title":{},"body":{"index.html":{}}}],["properties",{"_index":104,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/dtos/create",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["providers/dtos/patch",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["providers/posts.service",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/user.service",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":536,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":577,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":497,"title":{},"body":{"index.html":{}}}],["real",{"_index":551,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":478,"title":{},"body":{"index.html":{}}}],["request",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":518,"title":{},"body":{"index.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":530,"title":{},"body":{"index.html":{}}}],["response",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":483,"title":{},"body":{"index.html":{}}}],["runs",{"_index":502,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":472,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series\"'})@isenum(posttype)@isnotempty",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":473,"title":{},"body":{"index.html":{}}}],["setup",{"_index":480,"title":{},"body":{"index.html":{}}}],["shoud",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["side",{"_index":474,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":520,"title":{},"body":{"index.html":{}}}],["single",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["specific",{"_index":253,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":572,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":395,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/enums/poststatus.enum",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":275,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:12",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:24",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":322,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/dtos/create",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/providers/dtos/patch",{"_index":259,"title":{},"body":{"classes/PatchPostsDto.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":324,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":326,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":328,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":249,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":269,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/providers/user.service.ts",{"_index":396,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:18",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/user.service.ts:42",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/user.service.ts:9",{"_index":404,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:48",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":393,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":485,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":488,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":490,"title":{},"body":{"index.html":{}}}],["started",{"_index":466,"title":{"index.html":{}},"body":{}}],["starter",{"_index":477,"title":{},"body":{"index.html":{}}}],["statements",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":558,"title":{},"body":{"index.html":{}}}],["steps",{"_index":499,"title":{},"body":{"index.html":{}}}],["stories",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["story",{"_index":462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":516,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["succesfuly",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["sucessfuly",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfuly'})@patch",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfuly'})@post",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":537,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":589,"title":{},"body":{"modules.html":{}}}],["table",{"_index":398,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":500,"title":{},"body":{"index.html":{}}}],["test",{"_index":332,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":495,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":494,"title":{},"body":{"index.html":{}}}],["teste",{"_index":331,"title":{},"body":{"injectables/PostsService.html":{}}}],["tests",{"_index":491,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":571,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservices.findall(userid",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":330,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":552,"title":{},"body":{"index.html":{}}}],["title",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token_sample",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":579,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":585,"title":{},"body":{"index.html":{}}}],["type",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":272,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":492,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":596,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":267,"title":{},"body":{"classes/PatchPostsDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":263,"title":{},"body":{"classes/PatchPostsDto.html":{}}}],["updatepost",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":273,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":250,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":394,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/providers/user.service",{"_index":329,"title":{},"body":{"injectables/PostsService.html":{}}}],["users/users.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":334,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":78,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["validatenested",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostsDto.html":{},"dependencies.html":{}}}],["value",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":594,"title":{},"body":{"properties.html":{}}}],["video",{"_index":545,"title":{},"body":{"index.html":{}}}],["visit",{"_index":534,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":548,"title":{},"body":{"index.html":{}}}],["void",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":486,"title":{},"body":{"index.html":{}}}],["website",{"_index":583,"title":{},"body":{"index.html":{}}}],["without",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":533,"title":{},"body":{"index.html":{}}}],["world",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":561,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":575,"title":{},"body":{"index.html":{}}}],["you're",{"_index":496,"title":{},"body":{"index.html":{}}}],["z0",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z])(?=.*[a",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*()_",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    // login\n    return 'TOKEN_SAMPLE';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image to your blog post', example: 'https://localhost.com/images/images1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values: \"post\", \"page\", \"stories\", \"series\"'})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\"}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug shoud be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'PossibleValues 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title of the blog post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  Matches,\n  IsOptional,\n  IsJSON,\n  IsUrl,\n  IsISO8601,\n  ValidateNested,\n} from 'class-validator';\nimport { postStatus } from 'src/posts/enums/postStatus.enum';\nimport { postType } from 'src/posts/enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title of the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: 'Possible values: \"post\", \"page\", \"stories\", \"series\"',\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug shoud be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"PossibleValues 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiProperty({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example: '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\"}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image to your blog post',\n    example: 'https://localhost.com/images/images1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: string;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@IsNotEmpty()@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+={}|\\[\\]\\\\:\";'<>?,./~`-]).{8,}$/, {message: 'Password does not match the required pattern'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  name: string;\n\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @IsNotEmpty()\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+={}|\\[\\]\\\\:\";'<>?,./~`-]).{8,}$/,\n    {\n      message: 'Password does not match the required pattern',\n    },\n  )\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get a user with specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get a user with specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostsDto.html":{"url":"classes/PatchPostsDto.html","title":"class - PatchPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostsDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post was created sucessfuly'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated sucessfuly'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Patch } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { CreatePostDto } from './providers/dtos/create-post.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostsDto } from './providers/dtos/patch-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsServices: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsServices.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Create a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post was created sucessfuly',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n    return 'post created';\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated sucessfuly',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostsDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../../users/providers/user.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    return [\n      {\n        user: user,\n        title: 'Teste title',\n        content: 'Test Content',\n      },\n      {\n        user: user,\n        title: 'Teste title 2',\n        content: 'Test Content 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched succesfuly based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 10})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  ValidationPipe,\n  DefaultValuePipe,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse } from '@nestjs/swagger';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched succesfuly based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 10,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body(new ValidationPipe()) createUserDto: CreateUserDto) {\n    console.log(createUserDto);\n    return 'You sent a POST request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    console.log(patchUserDto);\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform bussiness operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:18\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { name: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to connect to Users table and perform bussiness operations\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * The method to get all the users from the database\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n\n    console.log('Buscando no banco de dados o ID...');\n    return [\n      {\n        name: 'john',\n        email: 'johnvlogs@gmial.com',\n      },\n      {\n        name: 'joana',\n        email: 'joanapaty@gmail.com',\n      },\n    ];\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  public findOneById(id: string) {\n    return {\n      name: 'joana',\n      email: 'joanapaty@gmail.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/providers/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/providers/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UsersService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
